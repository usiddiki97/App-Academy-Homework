{"version":3,"file":"bundle.js","mappings":"UAEIA,E,WCAJ,SAASA,EAAKC,GACZC,KAAKD,IAAMA,EACXC,KAAKC,YACP,CAEAC,OAAOC,mBAAqB,WAC1B,MAAO,IAAMC,KAAKC,SAASC,SAAS,IAAIC,QAAQ,EAClD,EAEAT,EAAKU,UAAUC,UAAY,WAMzBC,EAAE,MAAMC,YAAY,SACtB,EAEAb,EAAKU,UAAUI,UAAY,WAKzBF,EAAE,MAAMG,SAAS,SACnB,EAEAf,EAAKU,UAAUM,UAAY,WAKzBJ,EAAE,WAAWK,QACf,EAEAjB,EAAKU,UAAUQ,UAAY,WAKzB,MAAMC,EAAWP,EAAE,OAAQ,CACzBQ,KAAM,kBAMRR,EAAE,UAAUS,OAAOF,EACrB,EAEAnB,EAAKU,UAAUY,UAAY,WAKzBV,EAAE,2BAA2BW,KAAK,kBACpC,EAEAvB,EAAKU,UAAUc,UAAY,WASzBZ,EAAE,UAAUa,GAAG,QAAS,WAAWC,IACjC,MACMC,EADUf,EAAEc,EAAME,eACAC,KAAK,OAE7BC,MAAMH,EAAQ,GAGlB,EAEA3B,EAAKU,UAAUqB,UAAY,WAQzBnB,EAAE,WAAWoB,MAAK,CAACC,EAAOC,KACxBtB,EAAEsB,GAASC,IAAI,mBAAoB/B,OAAOC,qBAAqB,GAEnE,EAEAL,EAAKU,UAAU0B,UAAY,WAQzBxB,EAAE,UAAUa,GAAG,YAAa,WAAWC,IACrC,MAAMW,EAAUzB,EAAEc,EAAME,eACxBU,QAAQC,IAAIF,EAAQF,IAAI,oBAAoB,GAEhD,EAIAnC,EAAKU,UAAUP,WAAa,WAC1B,MAAMqC,EAAgB5B,EAAE,YAAYQ,KAAK,aACzClB,KAAKD,IAAIoB,OAAOmB,GAChBA,EAAcf,GAAG,QAASvB,KAAKuC,OAAOC,KAAKxC,OAE3C,IAAI,IAAIyC,EAAI,EAAGA,GAAK,EAAGA,IAAI,CACzB,MAAMC,EAAUhC,EAAE,YAAYQ,KAAK,YAAcuB,GACjDC,EAAQnB,GAAG,QAASvB,KAAK,WAAayC,IACtCzC,KAAKD,IAAIoB,OAAOuB,EAClB,CAEA,IAAI,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACrB3C,KAAKuC,QAET,EAEAzC,EAAKU,UAAU+B,OAAS,WACtB,MAAMK,EAAS5C,KAAKD,IAAI8C,KAAK,QAAQC,OAC/BC,EAAOrC,EAAE,QAAQG,SAAS,OAAOA,SAAS,SAChD,IAAI,IAAImC,EAAS,EAAGA,EAAS,GAAIA,IAAU,CACzC,MAAMb,EAAUzB,EAAE,QAAQG,SAAS,UAAUoC,KAAK,WAAY,CAACL,EAAQI,IACvEb,EAAQZ,GAAG,cAAe2B,IACRxC,EAAEwC,EAAExB,eACZO,IAAI,mBAAoB/B,OAAOC,qBAAqB,IAE9D4C,EAAK5B,OAAOgB,EACd,CACAnC,KAAKD,IAAIoB,OAAO4B,EAClB,EAEAI,EAAOC,QAAUtD,C,GCvIbuD,EAA2B,CAAC,EFC5BvD,EEEJ,SAASwD,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaJ,QAGrB,IAAID,EAASE,EAAyBE,GAAY,CAGjDH,QAAS,CAAC,GAOX,OAHAM,EAAoBH,GAAUJ,EAAQA,EAAOC,QAASE,GAG/CH,EAAOC,OACf,CFpBW,CAAQ,KAEnB1C,GAAE,WACA,IAAIiD,EAASjD,EAAE,UACf,IAAIZ,EAAK6D,EACX,G","sources":["./js/main.js","./js/view.js","webpack/bootstrap"],"sourcesContent":["/* globals $ */\n\nvar View = require(\"./view\");\n\n$(function () {\n  var $easel = $(\"#easel\");\n  new View($easel);\n});\n","/* jshint esversion: 6 */\n\nfunction View($el) {\n  this.$el = $el;\n  this.setupEasel();\n}\n\nwindow._randomColorString = function(){\n  return '#' + Math.random().toString(16).substr(-6);\n};\n\nView.prototype.exercise0 = function () {\n  //Challenge: (example) remove the 'square' class from every li\n  //Result: this should cause the grid to turn into a long list of undecorated lis\n  //just a list of dots\n\n  //this one completed as an example :) no additional code necessary\n  $('li').removeClass(\"square\");\n};\n\nView.prototype.exercise1 = function () {\n  //Challenge: Give every square the class 'orange'\n  //Result: Every square should turn orange (we already have a CSS rule)\n\n  //your code here!\n  $('li').addClass(\"orange\");\n};\n\nView.prototype.exercise2 = function () {\n  //Challenge: Remove every square\n  //Result: Every square vanishes\n\n  //your code here!\n  $('.square').remove();\n};\n\nView.prototype.exercise3 = function () {\n  //Challenge: Add an <h1> with the text 'i love jquery' under the grid.\n  //Result: An <h1> with the text 'i love jquery' appears under the grid.\n\n  //your code here!\n  const $heading = $(\"<h1>\", {\n    html: \"i love jquery\"\n  });\n\n  // const h1 = $(\"<h1>\").text(\"I love jQuery\");\n  // const $h1 = $(\"<h1>i love jquery</h1>\");\n\n  $('#easel').append($heading);\n};\n\nView.prototype.exercise4 = function () {\n  //Challenge: Write your first name in every other square.\n  //Result: Your name appears in every other square.\n\n  //your code here!\n  $('.square:nth-child(even)').text(\"Umarbin Siddiki\");\n};\n\nView.prototype.exercise5 = function () {\n  //Challenge: Alert the row and column of the square, when the square is clicked.\n  //Result: When a square is clicked, the row and column appear in an alert. for\n  //example: clicking the top left square should alert '0, 0'.\n\n  //hint: checkout the addRow function at the bottom of the file: we set the\n  //  'data-pos' of every square\n\n  //your code here!\n  $('#easel').on('click', '.square', event => {\n    const $square = $(event.currentTarget);\n    const dataPos = $square.data(\"pos\");\n\n    alert(dataPos);\n    // alert($squareData.attr(\"data-pos\"));\n  })\n};\n\nView.prototype.exercise6 = function () {\n  //Challenge: Give every square a random color!\n  //Result: Every square becomes a color as soon as this code runs. The grid\n  //should become a beautiful rainbow of colors.\n\n  //hint: use window._randomColorString() (defined at top) to get a random color!\n\n  //your code here!\n  $('.square').each((index, element) => {\n    $(element).css('background-color', window._randomColorString());\n  })\n};\n\nView.prototype.exercise7 = function(){\n  //Challenge: When your mouse goes over a square, console log its color.\n  //Result: When the mouse goes over a square its color should appear in the\n  //console. The color won't be the color's name, but its rbg value.\n  //You should push the button for exercise 6 first to try it on the\n  //rainbow.\n\n  //your code here!\n  $('#easel').on(\"mouseover\", '.square', event => {\n    const $square = $(event.currentTarget);\n    console.log($square.css(\"background-color\"));\n  })\n};\n\n\n\nView.prototype.setupEasel = function() {\n  const $addRowButton = $('<button>').html('Add a row');\n  this.$el.append($addRowButton);\n  $addRowButton.on(\"click\", this.addRow.bind(this));\n\n  for(let j = 0; j <= 7; j++){\n    const $button = $(\"<button>\").html(\"Exercise \" + j);\n    $button.on(\"click\", this[\"exercise\" + j]);\n    this.$el.append($button);\n  }\n\n  for(let i = 0; i < 20; i ++) {\n    this.addRow();\n  }\n};\n\nView.prototype.addRow = function() {\n  const rowIdx = this.$el.find(\".row\").length;\n  const $row = $(\"<ul>\").addClass(\"row\").addClass(\"group\");\n  for(let colIdx = 0; colIdx < 20; colIdx++) {\n    const $square = $(\"<li>\").addClass(\"square\").attr(\"data-pos\", [rowIdx, colIdx]);\n    $square.on(\"mouseenter\", (e) => {\n      const $square = $(e.currentTarget);\n      $square.css(\"background-color\", window._randomColorString());\n    });\n    $row.append($square);\n  }\n  this.$el.append($row);\n};\n\nmodule.exports = View;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["View","$el","this","setupEasel","window","_randomColorString","Math","random","toString","substr","prototype","exercise0","$","removeClass","exercise1","addClass","exercise2","remove","exercise3","$heading","html","append","exercise4","text","exercise5","on","event","dataPos","currentTarget","data","alert","exercise6","each","index","element","css","exercise7","$square","console","log","$addRowButton","addRow","bind","j","$button","i","rowIdx","find","length","$row","colIdx","attr","e","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","$easel"],"sourceRoot":""}